#include "Start.h"
#include <cstdio>
#include <string>
#include <iomanip> 
#include <fstream>
#include "Tabulation on Tabl.h"
#include "ifFile.h"

using namespace std;

//Функция вывода отсортированной таблицы.
void vivod(int countStlb, string** array, int* arrayIndex, string fileName)
{
	int str(0), stlb(0), i(0);																//Счетчик.

	fileName = ifFileDetected(fileName);

	ofstream f2(fileName);																	//Открыть файл для заполнения.

	//Вывод в файл Рейсов.
	if (!fileName.find("Rase"))																//Если встречен файл Рейсов.
	{
		//Вывод заголовка в файл.
		{
			if (fileName.find("Up") != string::npos)										//Если сортировка по возрастанию.
			{
				f2 << " Таблица отсортирована по параметру <<Рейсы>> по Возрастанию.\n\n";
			}
			else 																			//Если сортировка по убыванию.
			{
				f2 << " Таблица отсортирована по параметру <<Рейсы>> по Убыванию.\n\n";
			}

			f2 << " Рейсы:\t\t|  Порт Отправления / Прибытия: |\tСтрана:\t\t|\tМоре:\n";	//Вывести 1-м столбец Рейсов.
			f2 << "~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~\n";
		}

		//Вывод в файл.
		while (i < countStlb)
		{
			str = arrayIndex[i];															//Взятие индекса из массива индексов.

			if (array[0][str] != "----")
			{
				f2 << " " << array[0][str] << tab(array[0][str]) << "     ";					//Вывод 1-м столбец Рейсов.
				f2 << array[1][str] << tab3(array[1][str]);
				f2 << array[2][str] << tab2(array[2][str]);
				f2 << array[3][str] << "\n\t\t|\t     ";
				f2 << array[4][str] << tab3(array[4][str]);
				f2 << array[5][str] << tab2(array[5][str]);
				f2 << array[6][str];
				f2 << "\n----------------|-------------------------------|-----------------------|-----------------------\n";
			}
			i++;
		}
	}

	//Вывод в файл Портов Отправления.
	if (!fileName.find("OutPort"))															//Если встречен файл Портов Отправления.
	{
		//Вывод заголовка в файл.
		{
			if (fileName.find("Up") != string::npos)										//Если сортировка по возрастанию.
			{
				f2 << " Таблица отсортирована по параметру <<Порт Отправления>> по Возрастанию.\n\n";
			}
			else 																			//Если сортировка по убыванию.
			{
				f2 << " Таблица отсортирована по параметру <<Порт Отправления>> по Убыванию.\n\n";
			}

			f2 << " Порт Отправления:\t|\tРейсы:\t\t|    Порт Прибытия:\t|\tСтрана:\t\t|\tМоре:\n";
			f2 << "~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~\n";
		}

		//Вывод в файл.
		while (i < countStlb)
		{
			str = arrayIndex[i];															//Взятие индекса из массива индексов.

			if (array[1][str] != "----")
			{
				f2 << "\t" << array[1][str] << tab2(array[1][str]);							//Вывод 1-м столбец Портов Отправления.
				f2 << array[0][str] << tab2(array[0][str]) << "\t\t|\t";
				f2 << array[2][str] << tab2(array[2][str]);
				f2 << array[3][str] << "\n\t\t\t|\t\t\t|\t";
				f2 << array[4][str] << tab2(array[4][str]);
				f2 << array[5][str] << tab2(array[5][str]);
				f2 << array[6][str] << "\n";
				f2 << "------------------------|-----------------------|-----------------------|-----------------------|-----------------------\n";
			}
			i++;
		}
	}

	//Вывод в файл Портов Прибытия.
	if (!fileName.find("InPort"))															//Если встречен файл Портов Прибытия.
	{
		//Вывод заголовка в файл.
		{
			if (fileName.find("Up") != string::npos)										//Если сортировка по возрастанию.
			{
				f2 << " Таблица отсортирована по параметру <<Порт Прибытия>> по Возрастанию.\n\n";
			}
			else  																			//Если сортировка по убыванию.
			{
				f2 << " Таблица отсортирована по параметру <<Порт Прибытия>> по Убыванию.\n\n";
			}

			f2 << " Порт Прибытия:\t|\tРейсы:\t\t|    Порт Отправления:\t|\tСтрана:\t\t|\tМоре:\n";
			f2 << "~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~\n";
		}

		//Вывод в файл.
		while (i < countStlb)
		{
			str = arrayIndex[i];															//Взятие индекса из массива индексов.

			if (array[4][str] != "" && array[4][str] != "----")
			{
				f2 << " " << array[4][str] << tab(array[4][str]);							//Вывод 1-м столбец Порта Прибытия.		
				f2 << array[0][str] << tab2(array[0][str]) << "\t\t|\t";
				f2 << array[5][str] << tab2(array[5][str]);
				f2 << array[6][str] << "\n\t\t|\t\t\t|\t";
				f2 << array[1][str] << tab2(array[1][str]);
				f2 << array[2][str] << tab2(array[2][str]);
				f2 << array[3][str] << "\n";
				f2 << "----------------|-----------------------|-----------------------|-----------------------|-----------------------\n";
			}
			i++;
		}
	}

	cout << "\n Сортировка завершена.\n Файл <<" << fileName << ">> сохранён по пути: ";

	f2.close();
}


//Сортировка по возростанию Рейсов, Портов Отправления/Прибытия. (Сортирует заданный столбец с запоминанием перемещаемых индексов(Номера Строки))
void sortUp(int countStlb, int nomberStlb, string** array, string fileName)
{
	int i(0), j(0), k(0), count(0);

	string* arrayStr = new string[countStlb];												//Массив сортируемых параметров.
	int* arrayIndex = new int[countStlb];													//Массив индексов параметров.
	
	//Запись в Локальный Массив.
	for (i = 0; i < countStlb; i++)
	{
		arrayStr[i] = array[nomberStlb][i];													//Запись параметров в массив параметров.
		arrayIndex[i] = i;																	//Запись параметра индекса.
	}

	//Сортировка Локального Массива.
	for (i = 0; i < countStlb; i++)															//Цикл проверки предыдущих значений.
	{
		j = i;
		for (k = i + 1; k < countStlb; k++)													//Цикл проверки следующих значений.
		{
			if (arrayStr[k] < arrayStr[j])													//Если следующий эл-т меньшы прерыдущего.
			{
				j = k;
			}
		}
		if (j != i)
			count++;

		swap(arrayStr[j], arrayStr[i]);														//Меняем местами параметры.
		swap(arrayIndex[j], arrayIndex[i]);													//Меняем местами индексы параметров.
	}
	vivod(countStlb, array, arrayIndex, fileName);

	cout << count <<"!!\n";
	delete[] arrayStr;																		//Освобождение памяти.
	delete[] arrayIndex;																	//Освобождение памяти.
}

//Сортировка по убыванию Рейсов, Портов Отправления/Прибытия. (Сортирует заданный столбец с запоминанием перемещаемых индексов(Номера Строки))
void sortDown(int countStlb, int nomberStlb, string** array, string fileName)
{
	int i(0), j(0), k(0), count(0);

	string* arrayStr = new string[countStlb];												//Массив сортируемых параметров.
	int* arrayIndex = new int[countStlb];													//Массив индексов параметров.

	//Запись в Локальный Массив.
	for (i = 0; i < countStlb; i++)
	{
		arrayStr[i] = array[nomberStlb][i];													//Запись параметров в массив параметров.
		arrayIndex[i] = i;																	//Запись параметра индекса.
	}

	//Сортировка Локального Массива.
	for (i = 0; i < countStlb; i++)															//Цикл проверки предыдущих значений.
	{
		j = i;
		for (k = i + 1; k < countStlb; k++)													//Цикл проверки следующих значений.
		{
			if (arrayStr[k] > arrayStr[j])													//Если следующий эл-т меньшы прерыдущего.
			{
				j = k;
			}
		}
		if (j != i)
			count++;

		swap(arrayStr[j], arrayStr[i]);														//Меняем местами параметры.
		swap(arrayIndex[j], arrayIndex[i]);													//Меняем местами индексы параметров.
	}
	vivod(countStlb, array, arrayIndex, fileName);

	cout << count << "!!\n";
	delete[] arrayStr;																		//Освобождение памяти.
	delete[] arrayIndex;																	//Освобождение памяти.
}