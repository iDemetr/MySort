#include <vector>

using namespace std;

//Функция вывода отсортированной таблицы.
void vivod2(int countStlb, string** array, int* arrayIndex, string* arrayStr, string fileName)
{
	//countStlb 	– номер сортируемого столбца.
	//Array			- сортируемый массив.
	//arrayIndex	– Массив индексов отсортированных элементов.
	//arrayStr		- Массив отсортированных строк.
	//filename 		- Имя выходного файла.


	int str(0), stlb(0), i(0), j(0), a(0),b(0);												//Счетчик.

	fileName = ifFileDetected(fileName);

	ofstream f2(fileName);																	//Открыть файл для заполнения.

	vector<string>localVec1(countStlb);														//Локальный вектор Страны/Моря Отправления.
	vector<string>localVec2(countStlb);														//Локальный вектор Страны/Моря Прибытия.

	//Вывод в файл Морей.
	if (!fileName.find("Sea"))																//Если встречен файл Морей.
	{
		//Копирование из исходного массива в локальный вектор.
		for (i = 0; i < countStlb; i++)
		{
			localVec1[i] = array[3][i];
			localVec2[i] = array[6][i];
		}

		//Вывод в файл заголовка.
		{
			if (fileName.find("Up") != string::npos)										//Если сортировка по возрастанию.
			{
				f2 << "  Таблица отсортирована по параметру <<Море>> по Возрастанию.\n\n";
			}
			else																			//Если сортировка по убыванию.
			{
				f2 << "  Таблица отсортирована по параметру <<Море>> по Убыванию.\n\n";
			}

			f2 << " Море:\t\t|\tРейс:\t\t|\tПорт:\t\t|\tСтрана:\n";							//Вывести 1-м столбец морей.
			f2 << "~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~\n";
		}

		//Вывод в файл эллементов.
		while (stlb < countStlb)
		{
			str = arrayIndex[stlb];															//Взятие индекса из массива индексов.

			if (arrayStr[stlb] == localVec1[str] && localVec1[str] != "----")				//Если отсортированное слово встречено
																							//в массиве отправления.
			{
				f2 << " " << localVec1[str] << tab(localVec1[str]);							//Вывести Море отправления Рейса.
				f2 << array[0][str] << tab2(array[0][str]);									//Вывести Рейс.
				f2 << array[1][str] << tab2(array[1][str]);									//Вывести Порт Отправления Рейса.
				f2 << array[2][str] << "\n";												//Вывести Страну Отправления Рейса.
				f2 << "----------------|-----------------------|-----------------------|-----------------------\n";

				localVec1[str] = "0";														//"Удалить" слово из Вектора Отправления.
			}																				//Фикс многократного вывода сортируемого столбца.

			if (localVec2[str] == arrayStr[stlb] && localVec2[str] != "----")
			{
				f2 << " " << localVec2[str] << tab(localVec2[str]);							//Вывести Море Прибытия Рейса.
				f2 << array[0][str] << tab2(array[0][str]);									//Вывести Рейс.
				f2 << array[4][str] << tab2(array[4][str]);									//Вывести Порт Прибытия Рейса.
				f2 << array[5][str] << "\n";												//Вывести Страну Прибытия Рейса.
				f2 << "----------------|-----------------------|-----------------------|-----------------------\n";

				localVec2[str] = "0";														//"Удалить" слово из Вектора Прибытия.
			}																				//Фикс многократного вывода сортируемого столбца.
			
			stlb++;

		}
	}

	//Вывод в файл Стран.
	if (!fileName.find("Country"))															//Если встречен файл Стран.
	{
		for (i = 0; i < countStlb; i++)
		{
			localVec1[i] = array[2][i];
			localVec2[i] = array[5][i];
		}

		//Вывод в файл заголовка.
		{
			if (fileName.find("Up") != string::npos)										//Если сортировка по возрастанию.
			{
				f2 << "  Таблица отсортирована по параметру <<Страна>> по Возрастанию.\n\n";
			}
			else 																			//Если сортировка по убыванию.
			{
				f2 << "  Таблица отсортирована по параметру <<Страна>> по Убыванию.\n\n";
			}

			f2 << " Страна:\t|\tРейсы:\t\t|\tПорт:\t\t|\tМоре:\n";							//Вывести 1-м столбец Стран.
			f2 << "~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~\n";
		}

		//Вывод в файл эллементов.
		while (stlb < countStlb)
		{
			str = arrayIndex[stlb];															//Взятие индекса из массива индексов.

			a = 0; b = 0;

			if (arrayStr[stlb] == localVec1[str] && localVec1[str] != "----")				//Если отсортированное слово встречено
			{																				//в массиве отправления.

				f2 << " " << localVec1[str] << tab(localVec1[str]);							//Вывести Страну Отправления Рейса.
				f2 << array[0][str] << tab2(array[0][str]);									//Вывести Рейс.
				f2 << array[1][str] << tab2(array[1][str]);									//Вывести Порт Отправления Рейса.
				f2 << array[3][str] << "\n";												//Вывести Море Отправления Рейса.
				f2 << "----------------|-----------------------|-----------------------|-----------------------\n";
				
				localVec1[str] = "0";														//"Удалить" слово из массива отправления.
			}

			if (localVec2[str] == arrayStr[stlb] && localVec2[str] != "----")				//Если отсортированное слово встречено
			{																				//в массиве Прибытия.

				f2 << " " << localVec2[str] << tab(localVec2[str]);							//Вывести Страну Прибытия Рейса.
				f2 << array[0][str] << tab2(array[0][str]);									//Вывести Рейс.
				f2 << array[4][str] << tab2(array[4][str]);									//Вывести Порт Прибытия Рейса.
				f2 << array[6][str] << "\n";												//Вывести Море Прибытия Рейса.
				f2 << "----------------|-----------------------|-----------------------|-----------------------\n";
				
				localVec2[str] = "0";														//"Удалить" слово из массива Прибытия.
			}
			stlb++;
		}
	}

	cout << "\n Сортировка завершена.\n Файл <<" << fileName << ">> сохранён по пути: ";

	f2.close();
}


//Сортировка по возростанию Двух Морей или Стран. (Сортирует заданный столбец с запоминанием перемещаемых индексов(Номера Строки))
void sortUp2(int countStlb, int nomberStlb, string** array, string fileName)
{
	int i(0), j(0), k(0), j1(0), count(0);													//Счетчик.

	string* arrayStr = new string[countStlb];												//Массив сортируемых параметров.
	int* arrayIndex = new int[countStlb];													//Массив индексов параметров.

	//Запись в Локальный Массив.
	while (i < countStlb)
	{
		arrayStr[i] = array[nomberStlb][j];													//Запись 1 параметра моря или страны в массив.
		arrayIndex[i] = j;																	//Запись индекса 1-го параметра.

		string strr("");

		if (array[nomberStlb + 3][j] != strr)
		{
			arrayStr[i + 1] = array[nomberStlb + 3][j1];									//Запись 2-го параметра моря или страны в массив.
			arrayIndex[i + 1] = j;															//Запись индекса 2-го параметра в массив.
			i++; j1++;
		}
		i++; j++;
	}

	//Сортировка в Локального Массива.
	for (i = 0; i < countStlb; i++)															//Цикл проверки предыдущих значений.
	{
		j = i;
		for (k = i + 1; k < countStlb; k++)													//Цикл проверки следующих значений.
		{
			if (arrayStr[k] < arrayStr[j])													//Если следующий эл-т меньшe прерыдущего.
			{
				j = k;
			}
		}
		if (j != i)
			count++;

		swap(arrayStr[j], arrayStr[i]);														//Меняем местами параметры.
		swap(arrayIndex[j], arrayIndex[i]);													//Меняем местами индексы параметров.
	}

	vivod2(countStlb, array, arrayIndex, arrayStr, fileName);

	cout << count << "!!\n";
	delete[] arrayStr;																		//Освобождение памяти.
	delete[] arrayIndex;																	//Освобождение памяти.
}

//Сортировка по убыванию Двух Морей или Стран. (Сортирует заданный столбец с запоминанием перемещаемых индексов(Номера Строки))
void sortDown2(int countStlb, int nomberStlb, string** array, string fileName)
{
	int i(0), j(0), k(0), j1(0), count(0);													//Счетчик.

	string* arrayStr = new string[countStlb];												//Массив сортируемых параметров.
	int* arrayIndex = new int[countStlb];													//Массив индексов параметров.

	//Запись в Локальный Массив.
	while (i < countStlb)
	{
		arrayStr[i] = array[nomberStlb][j];													//Запись 1 параметра моря или страны в массив.
		arrayIndex[i] = j;																	//Запись индекса 1-го параметра.

		string strr("");

		if (array[nomberStlb + 3][j] != strr)
		{
			arrayStr[i + 1] = array[nomberStlb + 3][j1];									//Запись 2-го параметра моря или страны в массив.
			arrayIndex[i + 1] = j;															//Запись индекса 2-го параметра в массив.
			i++; j1++;
		}
		i++; j++;
	}

	//Сортировка Локального Массива.
	for (i = 0; i < countStlb; i++)															//Цикл проверки предыдущих значений.
	{
		j = i;
		for (k = i + 1; k < countStlb; k++)													//Цикл проверки следующих значений.
		{
			if (arrayStr[k] > arrayStr[j])													//Если следующий эл-т меньшы прерыдущего.
			{
				j = k;
			}
		}
		if (j != i)
			count++;

		swap(arrayStr[j], arrayStr[i]);														//Меняем местами параметры.
		swap(arrayIndex[j], arrayIndex[i]);													//Меняем местами индексы параметров.
	}
	vivod2(countStlb, array, arrayIndex, arrayStr, fileName);

	cout << count << "!!\n";
	delete[] arrayStr;																		//Освобождение памяти.
	delete[] arrayIndex;																	//Освобождение памяти.
}